{"version":3,"file":"bundle.js","sources":["../node_modules/@phaserjs/phaser/textures/CreateCanvas.js","../node_modules/@phaserjs/phaser/textures/Frame.js","../node_modules/@phaserjs/phaser/renderer/webgl1/GL.js","../node_modules/@phaserjs/phaser/renderer/webgl1/DeleteGLTexture.js","../node_modules/@phaserjs/phaser/renderer/webgl1/CreateGLTexture.js","../node_modules/@phaserjs/phaser/math/pow2/IsSizePowerOfTwo.js","../node_modules/@phaserjs/phaser/textures/Texture.js","../node_modules/@phaserjs/phaser/renderer/webgl1/SetGLTextureFilterMode.js","../node_modules/@phaserjs/phaser/renderer/webgl1/UpdateGLTexture.js","../node_modules/@phaserjs/phaser/renderer/webgl1/DeleteFramebuffer.js","../node_modules/@phaserjs/phaser/gameobjects/sprite/RenderWebGL.js","../node_modules/@phaserjs/phaser/geom/rectangle/Rectangle.js","../node_modules/@phaserjs/phaser/geom/rectangle/Contains.js","../node_modules/@phaserjs/phaser/gameobjects/transformgameobject/const.js","../node_modules/@phaserjs/phaser/math/matrix2d/Matrix2D.js","../node_modules/@phaserjs/phaser/gameobjects/container/Container.js","../node_modules/@phaserjs/phaser/gameobjects/transformgameobject/TransformGameObject.js","../node_modules/@phaserjs/phaser/gameobjects/gameobject/GameObject.js","../node_modules/@phaserjs/phaser/math/matrix2d/Copy.js","../node_modules/@phaserjs/phaser/gameobjects/sprite/SetFrame.js","../node_modules/@phaserjs/phaser/GameInstance.js","../node_modules/@phaserjs/phaser/gameobjects/sprite/Sprite.js","../node_modules/@phaserjs/phaser/gameobjects/sprite/SetTexture.js","../node_modules/@phaserjs/phaser/dom/GetElement.js","../node_modules/@phaserjs/phaser/events/EventEmitter.js","../node_modules/@phaserjs/phaser/textures/TextureManager.js","../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/CheckShaderMaxIfStatements.js","../node_modules/@phaserjs/phaser/renderer/webgl1/shaders/MultiTextureQuadShader.js","../node_modules/@phaserjs/phaser/config/Parent.js","../node_modules/@phaserjs/phaser/config/Scenes.js","../node_modules/@phaserjs/phaser/config/Size.js","../node_modules/@phaserjs/phaser/config/WebGLContext.js","../node_modules/@phaserjs/phaser/renderer/webgl1/WebGLRenderer.js","../node_modules/@phaserjs/phaser/config/BackgroundColor.js","../node_modules/@phaserjs/phaser/renderer/webgl1/Ortho.js","../node_modules/@phaserjs/phaser/math/matrix2d-funcs/ExactEquals.js","../node_modules/@phaserjs/phaser/scenes/GetConfigValue.js","../node_modules/@phaserjs/phaser/scenes/SceneManager.js","../node_modules/@phaserjs/phaser/Game.js","../node_modules/@phaserjs/phaser/dom/DOMContentLoaded.js","../node_modules/@phaserjs/phaser/dom/AddToDOM.js","../node_modules/@phaserjs/phaser/camera/StaticCamera.js","../node_modules/@phaserjs/phaser/world/StaticWorld.js","../src/graveyard.js","../node_modules/@phaserjs/phaser/scenes/StaticScene.js","../node_modules/@phaserjs/phaser/textures/types/SolidColorTexture.js","../node_modules/@phaserjs/phaser/gameobjects/container/AddChild.js","../node_modules/@phaserjs/phaser/gameobjects/container/SetParent.js","../node_modules/@phaserjs/phaser/gameobjects/container/RemoveChild.js","../src/main.js"],"sourcesContent":["export default function CreateCanvas(width, height) {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    return canvas.getContext('2d');\r\n}\r\n//# sourceMappingURL=CreateCanvas.js.map","export default class Frame {\r\n    constructor(texture, key, x, y, width, height) {\r\n        this.trimmed = false;\r\n        this.texture = texture;\r\n        this.key = key;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n        this.updateUVs();\r\n    }\r\n    setPivot(x, y) {\r\n        this.pivot = { x, y };\r\n    }\r\n    setSize(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n        this.updateUVs();\r\n    }\r\n    setSourceSize(width, height) {\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n    }\r\n    setTrim(width, height, x, y, w, h) {\r\n        this.trimmed = true;\r\n        this.sourceSizeWidth = width;\r\n        this.sourceSizeHeight = height;\r\n        this.spriteSourceSizeX = x;\r\n        this.spriteSourceSizeY = y;\r\n        this.spriteSourceSizeWidth = w;\r\n        this.spriteSourceSizeHeight = h;\r\n    }\r\n    updateUVs() {\r\n        const { x, y, width, height } = this;\r\n        const baseTextureWidth = this.texture.width;\r\n        const baseTextureHeight = this.texture.height;\r\n        this.u0 = x / baseTextureWidth;\r\n        this.v0 = y / baseTextureHeight;\r\n        this.u1 = (x + width) / baseTextureWidth;\r\n        this.v1 = (y + height) / baseTextureHeight;\r\n    }\r\n}\r\n//# sourceMappingURL=Frame.js.map","let gl;\r\nfunction get() {\r\n    return gl;\r\n}\r\nfunction set(context) {\r\n    gl = context;\r\n}\r\nexport default {\r\n    get,\r\n    set\r\n};\r\n//# sourceMappingURL=GL.js.map","import GL from './GL';\r\nexport default function DeleteGLTexture(texture) {\r\n    const gl = GL.get();\r\n    if (gl.isTexture(texture)) {\r\n        gl.deleteTexture(texture);\r\n    }\r\n}\r\n//# sourceMappingURL=DeleteGLTexture.js.map","import GL from './GL';\r\nimport IsSizePowerOfTwo from '../../math/pow2/IsSizePowerOfTwo';\r\nexport default function CreateGLTexture(source, width, height, potClamp = true, linear = true) {\r\n    const gl = GL.get();\r\n    const glTexture = gl.createTexture();\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, glTexture);\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n    if (source) {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\r\n        width = source.width;\r\n        height = source.height;\r\n    }\r\n    else {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n    }\r\n    const mode = (linear) ? gl.LINEAR : gl.NEAREST;\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, mode);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, mode);\r\n    const pot = (source && IsSizePowerOfTwo(width, height));\r\n    const wrap = (pot && potClamp) ? gl.REPEAT : gl.CLAMP_TO_EDGE;\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap);\r\n    if (pot) {\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n    return glTexture;\r\n}\r\n//# sourceMappingURL=CreateGLTexture.js.map","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n/**\r\n * Checks if the given `width` and `height` are a power of two.\r\n * Useful for checking texture dimensions.\r\n *\r\n * @function Phaser.Math.Pow2.IsSize\r\n * @since 3.0.0\r\n *\r\n * @param {number} width - The width.\r\n * @param {number} height - The height.\r\n *\r\n * @return {boolean} `true` if `width` and `height` are a power of two, otherwise `false`.\r\n */\r\nexport default function IsSizePowerOfTwo(width, height) {\r\n    if (width < 1 || height < 1) {\r\n        return false;\r\n    }\r\n    return ((width & (width - 1)) === 0) && ((height & (height - 1)) === 0);\r\n}\r\n//# sourceMappingURL=IsSizePowerOfTwo.js.map","import Frame from './Frame';\r\nimport SetGLTextureFilterMode from '../renderer/webgl1/SetGLTextureFilterMode';\r\nimport DeleteGLTexture from '../renderer/webgl1/DeleteGLTexture';\r\nimport DeleteFramebuffer from '../renderer/webgl1/DeleteFramebuffer';\r\nimport CreateGLTexture from '../renderer/webgl1/CreateGLTexture';\r\nimport UpdateGLTexture from '../renderer/webgl1/UpdateGLTexture';\r\nexport default class Texture {\r\n    constructor(image, width, height) {\r\n        //  Unique identifier of this Texture, if stored in the Texture Manager\r\n        this.key = '';\r\n        this.glIndex = 0;\r\n        this.glIndexCounter = -1;\r\n        if (image) {\r\n            width = image.width;\r\n            height = image.height;\r\n        }\r\n        this.image = image;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.frames = new Map();\r\n        this.data = {};\r\n        this.add('__BASE', 0, 0, width, height);\r\n    }\r\n    add(key, x, y, width, height) {\r\n        if (this.frames.has(key)) {\r\n            return null;\r\n        }\r\n        let frame = new Frame(this, key, x, y, width, height);\r\n        this.frames.set(key, frame);\r\n        if (!this.firstFrame || this.firstFrame.key === '__BASE') {\r\n            this.firstFrame = frame;\r\n        }\r\n        return frame;\r\n    }\r\n    get(key) {\r\n        //  null, undefined, empty string, zero\r\n        if (!key) {\r\n            return this.firstFrame;\r\n        }\r\n        if (key instanceof Frame) {\r\n            key = key.key;\r\n        }\r\n        let frame = this.frames.get(key);\r\n        if (!frame) {\r\n            console.warn('Texture.frame missing: ' + key);\r\n            frame = this.firstFrame;\r\n        }\r\n        return frame;\r\n    }\r\n    getFrames(frames) {\r\n        const output = [];\r\n        frames.forEach((key) => {\r\n            output.push(this.get(key));\r\n        });\r\n        return output;\r\n    }\r\n    getFramesInRange(prefix, start, end, zeroPad = 0, suffix = '') {\r\n        const frameKeys = [];\r\n        const diff = (start < end) ? 1 : -1;\r\n        //  Adjust because we use i !== end in the for loop\r\n        end += diff;\r\n        for (let i = start; i !== end; i += diff) {\r\n            frameKeys.push(prefix + i.toString().padStart(zeroPad, '0') + suffix);\r\n        }\r\n        return this.getFrames(frameKeys);\r\n    }\r\n    setSize(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        const frame = this.frames.get('__BASE');\r\n        frame.setSize(width, height);\r\n    }\r\n    setFilter(linear) {\r\n        SetGLTextureFilterMode(this.glTexture, linear);\r\n    }\r\n    createGL() {\r\n        if (this.glTexture) {\r\n            DeleteGLTexture(this.glTexture);\r\n        }\r\n        this.glTexture = CreateGLTexture(this.image);\r\n    }\r\n    updateGL() {\r\n        if (!this.glTexture) {\r\n            this.glTexture = CreateGLTexture(this.image);\r\n        }\r\n        else {\r\n            UpdateGLTexture(this.image, this.glTexture);\r\n        }\r\n    }\r\n    destroy() {\r\n        this.frames.clear();\r\n        this.image = null;\r\n        this.firstFrame = null;\r\n        this.data = null;\r\n        DeleteGLTexture(this.glTexture);\r\n        DeleteFramebuffer(this.glFramebuffer);\r\n    }\r\n}\r\n//# sourceMappingURL=Texture.js.map","import GL from './GL';\r\nexport default function SetGLTextureFilterMode(texture, linear = true) {\r\n    const gl = GL.get();\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    const mode = (linear) ? gl.LINEAR : gl.NEAREST;\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, mode);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, mode);\r\n}\r\n//# sourceMappingURL=SetGLTextureFilterMode.js.map","import GL from './GL';\r\nexport default function UpdateGLTexture(source, dstTexture, flipY = false) {\r\n    const gl = GL.get();\r\n    const width = source.width;\r\n    const height = source.height;\r\n    if (width > 0 && height > 0) {\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, dstTexture);\r\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\r\n    }\r\n}\r\n//# sourceMappingURL=UpdateGLTexture.js.map","import GL from './GL';\r\nexport default function DeleteFramebuffer(framebuffer) {\r\n    const gl = GL.get();\r\n    if (gl.isFramebuffer(framebuffer)) {\r\n        gl.deleteFramebuffer(framebuffer);\r\n    }\r\n}\r\n//# sourceMappingURL=DeleteFramebuffer.js.map","export default function RenderWebGL(sprite, renderer, shader, startActiveTexture) {\r\n    const texture = sprite.texture;\r\n    if (texture.glIndexCounter < startActiveTexture) {\r\n        renderer.requestTexture(texture);\r\n    }\r\n    if (shader.count === shader.batchSize) {\r\n        shader.flush();\r\n    }\r\n    sprite.uploadBuffers(shader.vertexViewF32, shader.vertexViewU32, shader.count * shader.quadElementSize);\r\n    shader.count++;\r\n}\r\n//# sourceMappingURL=RenderWebGL.js.map","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\nimport Contains from './Contains';\r\nexport default class Rectangle {\r\n    constructor(x = 0, y = 0, width = 0, height = 0) {\r\n        this.set(x, y, width, height);\r\n    }\r\n    set(x = 0, y = 0, width = 0, height = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n    contains(x, y) {\r\n        return Contains(this, x, y);\r\n    }\r\n    set right(value) {\r\n        if (value <= this.x) {\r\n            this.width = 0;\r\n        }\r\n        else {\r\n            this.width = value - this.x;\r\n        }\r\n    }\r\n    get right() {\r\n        return this.x + this.width;\r\n    }\r\n    set bottom(value) {\r\n        if (value <= this.y) {\r\n            this.height = 0;\r\n        }\r\n        else {\r\n            this.height = value - this.y;\r\n        }\r\n    }\r\n    get bottom() {\r\n        return this.y + this.height;\r\n    }\r\n}\r\n//# sourceMappingURL=Rectangle.js.map","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n/**\r\n * Checks if a given point is inside a Rectangle's bounds.\r\n *\r\n * @function Phaser.Geom.Rectangle.Contains\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Rectangle} rect - The Rectangle to check.\r\n * @param {number} x - The X coordinate of the point to check.\r\n * @param {number} y - The Y coordinate of the point to check.\r\n *\r\n * @return {boolean} `true` if the point is within the Rectangle's bounds, otherwise `false`.\r\n */\r\nexport default function Contains(rect, x, y) {\r\n    if (rect.width <= 0 || rect.height <= 0) {\r\n        return false;\r\n    }\r\n    return (rect.x <= x && rect.x + rect.width >= x && rect.y <= y && rect.y + rect.height >= y);\r\n}\r\n//# sourceMappingURL=Contains.js.map","export default {\r\n    POSITION_X: 0,\r\n    POSITION_Y: 1,\r\n    ORIGIN_X: 2,\r\n    ORIGIN_Y: 3,\r\n    SKEW_X: 4,\r\n    SKEW_Y: 5,\r\n    SCALE_X: 6,\r\n    SCALE_Y: 7,\r\n    ROTATION: 8,\r\n    ANGLE: 9\r\n};\r\n//# sourceMappingURL=const.js.map","//  A Matrix2D contains six elements in a short-form of the 3x3 Matrix, with the last column ignored.\r\n//  |----|----|----|\r\n//  | a  | b  | 0  |\r\n//  |----|----|----|\r\n//  | c  | d  | 0  |\r\n//  |----|----|----|\r\n//  | tx | ty | 1  |\r\n//  |----|----|----|\r\nexport default class Matrix2D {\r\n    /**\r\n     * Creates an instance of Matrix2D.\r\n     *\r\n     * @param {number} [a=1] - X scale.\r\n     * @param {number} [b=0] - X skew.\r\n     * @param {number} [c=0] - Y skew.\r\n     * @param {number} [d=1] - Y scale.\r\n     * @param {number} [tx=0] - X translation\r\n     * @param {number} [ty=0] - Y translation\r\n     * @memberof Matrix2D\r\n     */\r\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\r\n        this.set(a, b, c, d, tx, ty);\r\n    }\r\n    set(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n        this.d = d;\r\n        this.tx = tx;\r\n        this.ty = ty;\r\n        return this;\r\n    }\r\n    identity() {\r\n        return this.set();\r\n    }\r\n    toArray() {\r\n        return [this.a, this.b, this.c, this.d, this.tx, this.ty];\r\n    }\r\n    fromArray(src) {\r\n        return this.set(src[0], src[1], src[2], src[3], src[4], src[5]);\r\n    }\r\n    [Symbol.iterator]() {\r\n        const data = this.toArray();\r\n        return data[Symbol.iterator]();\r\n    }\r\n}\r\n//# sourceMappingURL=Matrix2D.js.map","import TransformGameObject from '../transformgameobject/TransformGameObject';\r\nexport default class Container extends TransformGameObject {\r\n    constructor(x = 0, y = 0) {\r\n        super(x, y);\r\n        this._alpha = 1;\r\n        this.children = [];\r\n        this.isParent = true;\r\n        this.type = 'Container';\r\n    }\r\n    update(delta, time) {\r\n        const children = this.children;\r\n        for (let i = 0; i < children.length; i++) {\r\n            let child = children[i];\r\n            if (child && child.willUpdate) {\r\n                child.update(delta, time);\r\n            }\r\n        }\r\n    }\r\n    destroy(reparentChildren) {\r\n        // if (reparentChildren)\r\n        // {\r\n        //     this.reparentChildren(reparentChildren);\r\n        // }\r\n        // else\r\n        // {\r\n        //     this.destroyChildren();\r\n        // }\r\n        this.children = null;\r\n        super.destroy();\r\n    }\r\n    get numChildren() {\r\n        return this.children.length;\r\n    }\r\n    get alpha() {\r\n        return this._alpha;\r\n    }\r\n    set alpha(value) {\r\n        if (value !== this._alpha) {\r\n            this._alpha = value;\r\n            this.setDirtyRender();\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Container.js.map","import GameObject from '../gameobject/GameObject';\r\nimport CONST from './const';\r\nimport Matrix2D from '../../math/matrix2d/Matrix2D';\r\nimport Copy from '../../math/matrix2d/Copy';\r\nexport default class TransformGameObject extends GameObject {\r\n    constructor(x = 0, y = 0) {\r\n        super();\r\n        const byte = Float32Array.BYTES_PER_ELEMENT;\r\n        const buffer = new ArrayBuffer(10 * byte);\r\n        this.transformBuffer = buffer;\r\n        /**\r\n         * transformData:\r\n         * 0 = position x\r\n         * 1 = position y\r\n         * 2 = origin x\r\n         * 3 = origin y\r\n         * 4 = skew x\r\n         * 5 = skew y\r\n         * 6 = scale x\r\n         * 7 = scale y\r\n         * 8 = rotation\r\n         * 9 = angle\r\n         */\r\n        this.transformData = new Float32Array(buffer, 0, 10);\r\n        this.localTransform = new Matrix2D();\r\n        this.worldTransform = new Matrix2D();\r\n        this.transformData.set([x, y, 0.5, 0.5, 0, 0, 1, 1, 0, 0]);\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.updateCache();\r\n    }\r\n    updateCache() {\r\n        const transform = this.localTransform;\r\n        const { rotation, skewX, skewY, scaleX, scaleY, x, y } = this;\r\n        transform.set(Math.cos(rotation + skewY) * scaleX, Math.sin(rotation + skewY) * scaleX, -Math.sin(rotation - skewX) * scaleY, Math.cos(rotation - skewX) * scaleY, x, y);\r\n        return this.updateTransform();\r\n    }\r\n    updateTransform() {\r\n        this.setDirtyRender();\r\n        const parent = this.parent;\r\n        const lt = this.localTransform;\r\n        const wt = this.worldTransform;\r\n        lt.tx = this.x;\r\n        lt.ty = this.y;\r\n        if (!parent) {\r\n            Copy(lt, wt);\r\n            return this;\r\n        }\r\n        const { a, b, c, d, tx, ty } = lt;\r\n        const { a: pa, b: pb, c: pc, d: pd, tx: ptx, ty: pty } = parent.worldTransform;\r\n        wt.set(a * pa + b * pc, a * pb + b * pd, c * pa + d * pc, c * pb + d * pd, tx * pa + ty * pc + ptx, tx * pb + ty * pd + pty);\r\n        return this;\r\n    }\r\n    setSize(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n    setOrigin(originX, originY = originX) {\r\n        const data = this.transformData;\r\n        data[CONST.ORIGIN_X] = originX;\r\n        data[CONST.ORIGIN_Y] = originY;\r\n        return this;\r\n    }\r\n    setPosition(x, y = x) {\r\n        const data = this.transformData;\r\n        data[CONST.POSITION_X] = x;\r\n        data[CONST.POSITION_Y] = y;\r\n        return this.updateTransform();\r\n    }\r\n    setRotation(rotation) {\r\n        const data = this.transformData;\r\n        if (rotation !== data[CONST.ROTATION]) {\r\n            data[CONST.ROTATION] = rotation;\r\n            this.updateCache();\r\n        }\r\n        return this;\r\n    }\r\n    setScale(scaleX, scaleY = scaleX) {\r\n        const data = this.transformData;\r\n        data[CONST.SCALE_X] = scaleX;\r\n        data[CONST.SCALE_Y] = scaleY;\r\n        return this.updateCache();\r\n    }\r\n    setSkew(skewX, skewY = skewX) {\r\n        const data = this.transformData;\r\n        data[CONST.SKEW_X] = skewX;\r\n        data[CONST.SKEW_Y] = skewY;\r\n        return this.updateCache();\r\n    }\r\n    destroy() {\r\n        super.destroy();\r\n        this.localTransform = null;\r\n        this.worldTransform = null;\r\n        this.transformBuffer = null;\r\n        this.transformData = null;\r\n    }\r\n    set x(value) {\r\n        this.transformData[CONST.POSITION_X] = value;\r\n        this.updateTransform();\r\n    }\r\n    get x() {\r\n        return this.transformData[CONST.POSITION_X];\r\n    }\r\n    set y(value) {\r\n        this.transformData[CONST.POSITION_Y] = value;\r\n        this.updateTransform();\r\n    }\r\n    get y() {\r\n        return this.transformData[CONST.POSITION_Y];\r\n    }\r\n    get originX() {\r\n        return this.transformData[CONST.ORIGIN_X];\r\n    }\r\n    set originX(value) {\r\n        this.transformData[CONST.ORIGIN_X] = value;\r\n    }\r\n    get originY() {\r\n        return this.transformData[CONST.ORIGIN_Y];\r\n    }\r\n    set originY(value) {\r\n        this.transformData[CONST.ORIGIN_Y] = value;\r\n    }\r\n    set skewX(value) {\r\n        const data = this.transformData;\r\n        if (value !== data[CONST.SKEW_X]) {\r\n            data[CONST.SKEW_X] = value;\r\n            this.updateCache();\r\n        }\r\n    }\r\n    get skewX() {\r\n        return this.transformData[CONST.SKEW_X];\r\n    }\r\n    set skewY(value) {\r\n        const data = this.transformData;\r\n        if (value !== data[CONST.SKEW_Y]) {\r\n            data[CONST.SKEW_Y] = value;\r\n            this.updateCache();\r\n        }\r\n    }\r\n    get skewY() {\r\n        return this.transformData[CONST.SKEW_Y];\r\n    }\r\n    set scaleX(value) {\r\n        const data = this.transformData;\r\n        if (value !== data[CONST.SCALE_X]) {\r\n            data[CONST.SCALE_X] = value;\r\n            this.updateCache();\r\n        }\r\n    }\r\n    get scaleX() {\r\n        return this.transformData[CONST.SCALE_X];\r\n    }\r\n    set scaleY(value) {\r\n        const data = this.transformData;\r\n        if (value !== data[CONST.SCALE_Y]) {\r\n            data[CONST.SCALE_Y] = value;\r\n            this.updateCache();\r\n        }\r\n    }\r\n    get scaleY() {\r\n        return this.transformData[CONST.SCALE_Y];\r\n    }\r\n    set rotation(value) {\r\n        const data = this.transformData;\r\n        if (value !== data[CONST.ROTATION]) {\r\n            data[CONST.ROTATION] = value;\r\n            this.updateCache();\r\n        }\r\n    }\r\n    get rotation() {\r\n        return this.transformData[CONST.ROTATION];\r\n    }\r\n}\r\n//# sourceMappingURL=TransformGameObject.js.map","import Rectangle from '../../geom/rectangle/Rectangle';\r\n//  The Base Game Object which all Scene entites extend\r\nexport default class GameObject {\r\n    constructor() {\r\n        this.name = '';\r\n        this.type = 'GameObject';\r\n        this.willRender = true;\r\n        this.willUpdate = true;\r\n        this.dirtyRender = true;\r\n        this.dirtyUpdate = true;\r\n        this.dirtyFrame = 0;\r\n        this.isParent = false;\r\n        this.visible = true;\r\n        this.inputEnabled = false;\r\n        this.inputEnabledChildren = true;\r\n        this.fixBounds = false;\r\n        this.bounds = new Rectangle();\r\n    }\r\n    isRenderable() {\r\n        return (this.visible && this.willRender);\r\n    }\r\n    setDirtyRender(setFrame = true) {\r\n        this.dirtyRender = true;\r\n        const scene = this.scene;\r\n        if (setFrame && scene) {\r\n            this.dirtyFrame = scene.game.frame;\r\n        }\r\n        return this;\r\n    }\r\n    setDirtyUpdate() {\r\n        this.dirtyUpdate = true;\r\n        return this;\r\n    }\r\n    getBounds(includeChildren = false) {\r\n        return this.bounds;\r\n    }\r\n    setBounds(x, y, width, height) {\r\n        this.bounds.set(x, y, width, height);\r\n        return this;\r\n    }\r\n    update() {\r\n    }\r\n    updateTransform() {\r\n        return this;\r\n    }\r\n    render() {\r\n    }\r\n    destroy(reparentChildren) {\r\n        this.scene = null;\r\n    }\r\n}\r\n//# sourceMappingURL=GameObject.js.map","//  Copy the values from the src Matrix to the target Matrix and return the target Matrix.\r\nexport default function Copy(src, target) {\r\n    return target.set(src.a, src.b, src.c, src.d, src.tx, src.ty);\r\n}\r\n//# sourceMappingURL=Copy.js.map","export default function SetFrame(key, ...sprite) {\r\n    sprite.forEach(entity => {\r\n        let frame = entity.texture.get(key);\r\n        if (frame === entity.frame) {\r\n            return;\r\n        }\r\n        entity.frame = frame;\r\n        entity.setSize(frame.sourceSizeWidth, frame.sourceSizeHeight);\r\n        entity.setBounds(entity.x, entity.y, entity.width, entity.height);\r\n        if (frame.pivot) {\r\n            entity.setOrigin(frame.pivot.x, frame.pivot.y);\r\n        }\r\n        let data = entity.vertexData;\r\n        //  This rarely changes, so we'll set it here, rather than every game step:\r\n        data[2] = frame.u0;\r\n        data[3] = frame.v0;\r\n        data[8] = frame.u0;\r\n        data[9] = frame.v1;\r\n        data[14] = frame.u1;\r\n        data[15] = frame.v1;\r\n        data[20] = frame.u1;\r\n        data[21] = frame.v0;\r\n        entity.setDirtyRender();\r\n        entity.hasTexture = true;\r\n    });\r\n}\r\n//# sourceMappingURL=SetFrame.js.map","let gameInstance;\r\nfunction get() {\r\n    return gameInstance;\r\n}\r\nfunction set(game) {\r\n    gameInstance = game;\r\n}\r\nexport default {\r\n    get,\r\n    set\r\n};\r\n//# sourceMappingURL=GameInstance.js.map","import Container from '../container/Container';\r\nimport SetTexture from './SetTexture';\r\nimport SetFrame from './SetFrame';\r\nexport default class Sprite extends Container {\r\n    constructor(x, y, texture, frame) {\r\n        super(x, y);\r\n        this.hasTexture = false;\r\n        this._tint = 0xffffff;\r\n        this._prevTextureID = -1;\r\n        this.vertexData = new Float32Array(24).fill(0);\r\n        this.vertexColor = new Uint32Array(4).fill(4294967295);\r\n        this.vertexAlpha = new Float32Array(4).fill(1);\r\n        this.vertexTint = new Uint32Array(4).fill(0xffffff);\r\n        this.type = 'Sprite';\r\n        this.setTexture(texture, frame);\r\n        this.setBounds(x, y, this.width, this.height);\r\n    }\r\n    getBounds(includeChildren = false) {\r\n        if (this.dirtyRender) {\r\n            this.updateVertices();\r\n        }\r\n        super.getBounds(includeChildren);\r\n        return this.bounds;\r\n    }\r\n    setTexture(key, frame) {\r\n        SetTexture(key, frame, this);\r\n        return this;\r\n    }\r\n    setFrame(key) {\r\n        SetFrame(key, this);\r\n        return this;\r\n    }\r\n    isRenderable() {\r\n        return (this.visible && this.willRender && this.hasTexture && this.alpha > 0);\r\n    }\r\n    updateVertices() {\r\n        const data = this.vertexData;\r\n        this.dirtyRender = false;\r\n        const frame = this.frame;\r\n        const originX = this.originX;\r\n        const originY = this.originY;\r\n        let w0;\r\n        let w1;\r\n        let h0;\r\n        let h1;\r\n        const [a, b, c, d, tx, ty] = this.worldTransform;\r\n        if (frame.trimmed) {\r\n            w1 = frame.spriteSourceSizeX - (originX * frame.sourceSizeWidth);\r\n            w0 = w1 + frame.spriteSourceSizeWidth;\r\n            h1 = frame.spriteSourceSizeY - (originY * frame.sourceSizeHeight);\r\n            h0 = h1 + frame.spriteSourceSizeHeight;\r\n        }\r\n        else {\r\n            w1 = -originX * frame.sourceSizeWidth;\r\n            w0 = w1 + frame.sourceSizeWidth;\r\n            h1 = -originY * frame.sourceSizeHeight;\r\n            h0 = h1 + frame.sourceSizeHeight;\r\n        }\r\n        const x0 = (w1 * a) + (h1 * c) + tx;\r\n        const y0 = (w1 * b) + (h1 * d) + ty;\r\n        const x1 = (w1 * a) + (h0 * c) + tx;\r\n        const y1 = (w1 * b) + (h0 * d) + ty;\r\n        const x2 = (w0 * a) + (h0 * c) + tx;\r\n        const y2 = (w0 * b) + (h0 * d) + ty;\r\n        const x3 = (w0 * a) + (h1 * c) + tx;\r\n        const y3 = (w0 * b) + (h1 * d) + ty;\r\n        //  top left\r\n        data[0] = x0;\r\n        data[1] = y0;\r\n        //  bottom left\r\n        data[6] = x1;\r\n        data[7] = y1;\r\n        //  bottom right\r\n        data[12] = x2;\r\n        data[13] = y2;\r\n        //  top right\r\n        data[18] = x3;\r\n        data[19] = y3;\r\n        const bounds = this.bounds;\r\n        bounds.x = Math.min(x0, x1, x2, x3);\r\n        bounds.y = Math.min(y0, y1, y2, y3);\r\n        bounds.right = Math.max(x0, x1, x2, x3);\r\n        bounds.bottom = Math.max(y0, y1, y2, y3);\r\n    }\r\n    uploadBuffers(F32, U32, offset, setTexture = true) {\r\n        //  Skip all of this if not dirty\r\n        if (this.dirtyRender) {\r\n            this.updateVertices();\r\n        }\r\n        const data = this.vertexData;\r\n        const textureIndex = this.texture.glIndex;\r\n        //  Do we have a different texture ID?\r\n        if (setTexture && textureIndex !== this._prevTextureID) {\r\n            this._prevTextureID = textureIndex;\r\n            data[4] = textureIndex;\r\n            data[10] = textureIndex;\r\n            data[16] = textureIndex;\r\n            data[22] = textureIndex;\r\n        }\r\n        //  Copy the data to the array buffer\r\n        F32.set(data, offset);\r\n        const color = this.vertexColor;\r\n        //  Copy the vertex colors to the Uint32 view (as the data copy above overwrites them)\r\n        U32[offset + 5] = color[0];\r\n        U32[offset + 11] = color[2];\r\n        U32[offset + 17] = color[3];\r\n        U32[offset + 23] = color[1];\r\n    }\r\n    destroy(reparentChildren) {\r\n        super.destroy(reparentChildren);\r\n        this.texture = null;\r\n        this.frame = null;\r\n        this.hasTexture = false;\r\n        this.vertexData = null;\r\n        this.vertexColor = null;\r\n        this.vertexAlpha = null;\r\n        this.vertexTint = null;\r\n    }\r\n    get tint() {\r\n        return this._tint;\r\n    }\r\n    set tint(value) {\r\n        this._tint = value;\r\n        // this.setTint(value);\r\n    }\r\n}\r\n/*\r\n    vertexData array structure:\r\n\r\n    0 = topLeft.x\r\n    1 = topLeft.y\r\n    2 = frame.u0\r\n    3 = frame.v0\r\n    4 = textureIndex\r\n    5 = topLeft.packedColor\r\n\r\n    6 = bottomLeft.x\r\n    7 = bottomLeft.y\r\n    8 = frame.u0\r\n    9 = frame.v1\r\n    10 = textureIndex\r\n    11 = bottomLeft.packedColor\r\n\r\n    12 = bottomRight.x\r\n    13 = bottomRight.y\r\n    14 = frame.u1\r\n    15 = frame.v1\r\n    16 = textureIndex\r\n    17 = bottomRight.packedColor\r\n\r\n    18 = topRight.x\r\n    19 = topRight.y\r\n    20 = frame.u1\r\n    21 = frame.v0\r\n    22 = textureIndex\r\n    23 = topRight.packedColor\r\n*/\r\n//# sourceMappingURL=Sprite.js.map","import Texture from '../../textures/Texture';\r\nimport GameInstance from '../../GameInstance';\r\nimport SetFrame from './SetFrame';\r\nexport default function SetTexture(key, frame, ...sprite) {\r\n    sprite.forEach(entity => {\r\n        if (!key) {\r\n            return;\r\n        }\r\n        if (key instanceof Texture) {\r\n            entity.texture = key;\r\n        }\r\n        else {\r\n            entity.texture = GameInstance.get().textures.get(key);\r\n        }\r\n        if (!entity.texture) {\r\n            console.warn('Invalid Texture key: ' + key);\r\n        }\r\n        else {\r\n            if (!entity.texture.glTexture) {\r\n                entity.texture.createGL();\r\n            }\r\n            SetFrame(frame, entity);\r\n        }\r\n    });\r\n}\r\n//# sourceMappingURL=SetTexture.js.map","/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n/**\r\n * Attempts to get the target DOM element based on the given value, which can be either\r\n * a string, in which case it will be looked-up by ID, or an element node. If nothing\r\n * can be found it will return a reference to the document.body.\r\n *\r\n * @function Phaser.DOM.GetElement\r\n * @since 4.0.0\r\n *\r\n * @param {(string | HTMLElement)} [target] - The DOM element to look-up.\r\n *\r\n * @returns {HTMLElement} The HTML Element that was found.\r\n */\r\nexport default function GetElement(target) {\r\n    let element;\r\n    if (target) {\r\n        if (typeof target === 'string') {\r\n            //  Hopefully an element ID\r\n            element = document.getElementById(target);\r\n        }\r\n        else if (typeof target === 'object' && target.nodeType === 1) {\r\n            //  Quick test for a HTMLElement\r\n            element = target;\r\n        }\r\n    }\r\n    if (!element) {\r\n        element = document.body;\r\n    }\r\n    return element;\r\n}\r\n//# sourceMappingURL=GetElement.js.map","class EE {\r\n    constructor(callback, context, once = false) {\r\n        this.callback = callback;\r\n        this.context = context;\r\n        this.once = once;\r\n    }\r\n}\r\nexport default class EventEmitter {\r\n    constructor() {\r\n        this._events = new Map();\r\n    }\r\n    on(event, callback, context = this, once = false) {\r\n        if (typeof callback !== 'function') {\r\n            throw new TypeError('The listener must be a function');\r\n        }\r\n        const listener = new EE(callback, context, once);\r\n        const listeners = this._events.get(event);\r\n        if (!listeners) {\r\n            this._events.set(event, new Set([listener]));\r\n        }\r\n        else {\r\n            listeners.add(listener);\r\n        }\r\n        return this;\r\n    }\r\n    once(event, callback, context = this) {\r\n        return this.on(event, callback, context, true);\r\n    }\r\n    /**\r\n     * Clear an event by name.\r\n     */\r\n    clearEvent(event) {\r\n        this._events.delete(event);\r\n        return this;\r\n    }\r\n    /**\r\n     * Return an array listing the events for which the emitter has registered listeners.\r\n     */\r\n    eventNames() {\r\n        return [...this._events.keys()];\r\n    }\r\n    /**\r\n     * Return the listeners registered for a given event.\r\n     */\r\n    listeners(event) {\r\n        const out = [];\r\n        const listeners = this._events.get(event);\r\n        listeners.forEach((ee) => {\r\n            out.push(ee.callback);\r\n        });\r\n        return out;\r\n    }\r\n    /**\r\n     * Return the number of listeners listening to a given event.\r\n     */\r\n    listenerCount(event) {\r\n        const listeners = this._events.get(event);\r\n        return (listeners) ? listeners.size : 0;\r\n    }\r\n    /**\r\n     * Calls each of the listeners registered for a given event.\r\n     */\r\n    emit(event, ...args) {\r\n        if (!this._events.has(event)) {\r\n            return false;\r\n        }\r\n        const listeners = this._events.get(event);\r\n        for (const ee of listeners) {\r\n            ee.callback.apply(ee.context, args);\r\n            if (ee.once) {\r\n                listeners.delete(ee);\r\n            }\r\n        }\r\n        if (listeners.size === 0) {\r\n            this._events.delete(event);\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Remove the listeners of a given event.\r\n     *\r\n     * @param event\r\n     * @param callback\r\n     * @param context\r\n     * @param once\r\n     */\r\n    off(event, callback, context, once) {\r\n        if (!callback) {\r\n            //  Remove all events matching the given key\r\n            this._events.delete(event);\r\n        }\r\n        else {\r\n            const listeners = this._events.get(event);\r\n            const hasContext = !context;\r\n            const hasOnce = (once !== undefined);\r\n            for (const ee of listeners) {\r\n                if (ee.callback === callback && (hasContext && ee.context === console) && (hasOnce && ee.once === once)) {\r\n                    listeners.delete(ee);\r\n                }\r\n            }\r\n            if (listeners.size === 0) {\r\n                this._events.delete(event);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Remove all listeners, or those of the specified event.\r\n     *\r\n     * @param event\r\n     */\r\n    removeAllListeners(event) {\r\n        if (!event) {\r\n            this._events.clear();\r\n        }\r\n        else {\r\n            this._events.delete(event);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=EventEmitter.js.map","import Texture from './Texture';\r\nimport CreateCanvas from './CreateCanvas';\r\nexport default class TextureManager {\r\n    constructor() {\r\n        this.textures = new Map();\r\n        this.createDefaultTextures();\r\n    }\r\n    createDefaultTextures() {\r\n        this.add('__BLANK', new Texture(CreateCanvas(32, 32).canvas));\r\n        const missing = CreateCanvas(32, 32);\r\n        missing.strokeStyle = '#0f0';\r\n        missing.moveTo(0, 0);\r\n        missing.lineTo(32, 32);\r\n        missing.stroke();\r\n        missing.strokeRect(0.5, 0.5, 31, 31);\r\n        this.add('__MISSING', new Texture(missing.canvas));\r\n    }\r\n    get(key) {\r\n        if (this.textures.has(key)) {\r\n            return this.textures.get(key);\r\n        }\r\n        else {\r\n            return this.textures.get('__MISSING');\r\n        }\r\n    }\r\n    has(key) {\r\n        return this.textures.has(key);\r\n    }\r\n    add(key, source) {\r\n        let texture;\r\n        if (!this.textures.has(key)) {\r\n            if (source instanceof Texture) {\r\n                texture = source;\r\n            }\r\n            else {\r\n                texture = new Texture(source);\r\n            }\r\n            texture.key = key;\r\n            if (!texture.glTexture) {\r\n                texture.createGL();\r\n            }\r\n            this.textures.set(key, texture);\r\n        }\r\n        return texture;\r\n    }\r\n}\r\n//# sourceMappingURL=TextureManager.js.map","//  From Pixi v5\r\nconst fragTemplate = [\r\n    'precision mediump float;',\r\n    'void main(void){',\r\n    'float test = 0.1;',\r\n    '%forloop%',\r\n    'gl_FragColor = vec4(0.0);',\r\n    '}',\r\n].join('\\n');\r\nfunction generateSrc(maxIfs) {\r\n    let src = '';\r\n    for (let i = 0; i < maxIfs; ++i) {\r\n        if (i > 0) {\r\n            src += '\\nelse ';\r\n        }\r\n        if (i < maxIfs - 1) {\r\n            src += `if(test == ${i}.0){}`;\r\n        }\r\n    }\r\n    return src;\r\n}\r\nexport default function CheckShaderMaxIfStatements(maxIfs, gl) {\r\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n    while (true) {\r\n        const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateSrc(maxIfs));\r\n        gl.shaderSource(shader, fragmentSrc);\r\n        gl.compileShader(shader);\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            maxIfs = (maxIfs / 2) | 0;\r\n        }\r\n        else {\r\n            // valid!\r\n            break;\r\n        }\r\n    }\r\n    return maxIfs;\r\n}\r\n//# sourceMappingURL=CheckShaderMaxIfStatements.js.map","const shaderSource = {\r\n    fragmentShader: `\r\nprecision highp float;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nuniform sampler2D uTexture[%count%];\r\n\r\nvoid main (void)\r\n{\r\n    vec4 color;\r\n    %forloop%\r\n\r\n    gl_FragColor = color * vec4(vTintColor.bgr * vTintColor.a, vTintColor.a);\r\n}`,\r\n    vertexShader: `\r\nprecision highp float;\r\n\r\nattribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\nattribute float aTextureId;\r\nattribute vec4 aTintColor;\r\n\r\nuniform mat4 uProjectionMatrix;\r\nuniform mat4 uCameraMatrix;\r\n\r\nvarying vec2 vTextureCoord;\r\nvarying float vTextureId;\r\nvarying vec4 vTintColor;\r\n\r\nvoid main (void)\r\n{\r\n    vTextureCoord = aTextureCoord;\r\n    vTextureId = aTextureId;\r\n    vTintColor = aTintColor;\r\n\r\n    gl_Position = uProjectionMatrix * uCameraMatrix * vec4(aVertexPosition, 0.0, 1.0);\r\n}`\r\n};\r\nexport default class MultiTextureQuadShader {\r\n    constructor(renderer, config = {}) {\r\n        this.attribs = { aVertexPosition: 0, aTextureCoord: 0, aTextureId: 0, aTintColor: 0 };\r\n        this.uniforms = { uProjectionMatrix: 0, uCameraMatrix: 0, uTexture: 0 };\r\n        /**\r\n         * The size, in bytes, per entry in the array buffer.\r\n         *\r\n         * @type {number}\r\n         * @memberof MultiTextureQuadShader\r\n         */\r\n        this.dataSize = 4;\r\n        /**\r\n         * The size, in bytes, per entry in the element index array.\r\n         *\r\n         * @type {number}\r\n         * @memberof MultiTextureQuadShader\r\n         */\r\n        this.indexSize = 4;\r\n        /**\r\n         * The amount of elements / floats a single vertex consists of.\r\n         *\r\n         * The default is 6:\r\n         *\r\n         * position (x,y - 2 floats)\r\n         * texture coord (x,y - 2 floats)\r\n         * texture index (float)\r\n         * packed color (vec4)\r\n         *\r\n         * @type {number}\r\n         * @memberof MultiTextureQuadShader\r\n         */\r\n        this.vertexElementSize = 6;\r\n        /**\r\n         * The size, in bytes, of a single vertex in the array buffer.\r\n         *\r\n         * This is `vertexElementSize * dataSize`.\r\n         *\r\n         * @type {number}\r\n         * @memberof MultiTextureQuadShader\r\n         */\r\n        this.vertexByteSize = 6 * 4;\r\n        /**\r\n         * The size, in bytes, of a single quad in the array buffer.\r\n         *\r\n         * This is `vertexByteSize * 4`.\r\n         *\r\n         * @type {number}\r\n         * @memberof MultiTextureQuadShader\r\n         */\r\n        this.quadByteSize = (6 * 4) * 4;\r\n        /**\r\n         * The size, in quantity of elements, of a single quad in the element index array.\r\n         *\r\n         * This is `vertexElementSize * 4`.\r\n         *\r\n         * @type {number}\r\n         * @memberof MultiTextureQuadShader\r\n         */\r\n        this.quadElementSize = 6 * 4;\r\n        /**\r\n         * The total number of entries per quad in the element index array.\r\n         *\r\n         * The IBO contains 6 entries per quad:\r\n         *\r\n         * 0, 1, 2\r\n         * 2, 3, 0\r\n         *\r\n         * @type {number}\r\n         * @memberof MultiTextureQuadShader\r\n         */\r\n        this.quadIndexSize = 6;\r\n        this.renderer = renderer;\r\n        this.gl = renderer.gl;\r\n        const { batchSize = 4096, fragmentShader = shaderSource.fragmentShader, vertexShader = shaderSource.vertexShader } = config;\r\n        this.batchSize = batchSize;\r\n        this.bufferByteSize = batchSize * this.quadByteSize;\r\n        this.createBuffers();\r\n        this.createShaders(fragmentShader, vertexShader);\r\n        this.count = 0;\r\n    }\r\n    createBuffers() {\r\n        let ibo = [];\r\n        //  Seed the index buffer\r\n        for (let i = 0; i < (this.batchSize * this.indexSize); i += this.indexSize) {\r\n            ibo.push(i + 0, i + 1, i + 2, i + 2, i + 3, i + 0);\r\n        }\r\n        this.data = new ArrayBuffer(this.bufferByteSize);\r\n        this.index = new Uint16Array(ibo);\r\n        this.vertexViewF32 = new Float32Array(this.data);\r\n        this.vertexViewU32 = new Uint32Array(this.data);\r\n        const gl = this.gl;\r\n        this.vertexBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.data, gl.DYNAMIC_DRAW);\r\n        this.indexBuffer = gl.createBuffer();\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.index, gl.STATIC_DRAW);\r\n        //  Tidy-up\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n        ibo = [];\r\n    }\r\n    createShaders(fragmentShaderSource, vertexShaderSource) {\r\n        const gl = this.gl;\r\n        const maxTextures = this.renderer.maxTextures;\r\n        let src = '';\r\n        if (maxTextures > 1) {\r\n            for (let i = 0; i < maxTextures; i++) {\r\n                if (i > 0) {\r\n                    src += '\\nelse ';\r\n                }\r\n                if (i < maxTextures - 1) {\r\n                    src += `if (vTextureId < ${i}.5)`;\r\n                }\r\n                src += '\\n{';\r\n                src += `\\n  color = texture2D(uTexture[${i}], vTextureCoord);`;\r\n                src += '\\n}';\r\n            }\r\n            fragmentShaderSource = fragmentShaderSource.replace(/%count%/gi, `${maxTextures}`);\r\n            fragmentShaderSource = fragmentShaderSource.replace(/%forloop%/gi, src);\r\n        }\r\n        else {\r\n            src = 'color = texture2D(uTexture[0], vTextureCoord);';\r\n        }\r\n        //  Create the shaders\r\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n        gl.shaderSource(fragmentShader, fragmentShaderSource);\r\n        gl.compileShader(fragmentShader);\r\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n        gl.shaderSource(vertexShader, vertexShaderSource);\r\n        gl.compileShader(vertexShader);\r\n        const program = gl.createProgram();\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n        gl.useProgram(program);\r\n        this.program = program;\r\n        for (let key of Object.keys(this.attribs)) {\r\n            let location = gl.getAttribLocation(program, key);\r\n            gl.enableVertexAttribArray(location);\r\n            this.attribs[key] = location;\r\n        }\r\n        for (let key of Object.keys(this.uniforms)) {\r\n            this.uniforms[key] = gl.getUniformLocation(program, key);\r\n        }\r\n    }\r\n    bind(projectionMatrix, cameraMatrix) {\r\n        const gl = this.gl;\r\n        const renderer = this.renderer;\r\n        const uniforms = this.uniforms;\r\n        gl.useProgram(this.program);\r\n        gl.uniformMatrix4fv(uniforms.uProjectionMatrix, false, projectionMatrix);\r\n        gl.uniformMatrix4fv(uniforms.uCameraMatrix, false, cameraMatrix);\r\n        gl.uniform1iv(uniforms.uTexture, renderer.textureIndex);\r\n        this.bindBuffers(this.indexBuffer, this.vertexBuffer);\r\n    }\r\n    bindBuffers(indexBuffer, vertexBuffer) {\r\n        const gl = this.gl;\r\n        const stride = this.vertexByteSize;\r\n        const attribs = this.attribs;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\r\n        //  attributes must be reset whenever you change buffers\r\n        gl.vertexAttribPointer(attribs.aVertexPosition, 2, gl.FLOAT, false, stride, 0); // size = 8\r\n        gl.vertexAttribPointer(attribs.aTextureCoord, 2, gl.FLOAT, false, stride, 8); // size = 8, offset = position\r\n        gl.vertexAttribPointer(attribs.aTextureId, 1, gl.FLOAT, false, stride, 16); // size = 4, offset = position + tex coord\r\n        gl.vertexAttribPointer(attribs.aTintColor, 4, gl.UNSIGNED_BYTE, true, stride, 20); // size = 4, offset = position + tex coord + index\r\n        this.count = 0;\r\n    }\r\n    draw(count) {\r\n        const gl = this.gl;\r\n        const offset = count * this.quadByteSize;\r\n        if (offset === this.bufferByteSize) {\r\n            gl.bufferData(gl.ARRAY_BUFFER, this.data, gl.DYNAMIC_DRAW);\r\n        }\r\n        else {\r\n            let view = this.vertexViewF32.subarray(0, offset);\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, 0, view);\r\n        }\r\n        gl.drawElements(gl.TRIANGLES, count * this.quadIndexSize, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n    flush() {\r\n        const count = this.count;\r\n        if (count === 0) {\r\n            return false;\r\n        }\r\n        this.draw(count);\r\n        this.prevCount = count;\r\n        this.count = 0;\r\n        this.renderer.flushTotal++;\r\n        return true;\r\n    }\r\n}\r\n//# sourceMappingURL=MultiTextureQuadShader.js.map","import GetElement from '../dom/GetElement';\r\nlet _parent = null;\r\nfunction Parent(parent) {\r\n    return () => {\r\n        //  If this function was called and `null` *wasn't* given as the parent\r\n        //  then we try to figure it out, or fallback to the document body\r\n        if (parent) {\r\n            _parent = GetElement(parent);\r\n        }\r\n    };\r\n}\r\nfunction GetParent() {\r\n    return _parent;\r\n}\r\nexport { Parent, GetParent };\r\n//# sourceMappingURL=Parent.js.map","let _scenes = [];\r\nfunction Scenes(scenes) {\r\n    return () => {\r\n        _scenes = [].concat(scenes);\r\n    };\r\n}\r\nfunction GetScenes() {\r\n    return _scenes;\r\n}\r\nexport { Scenes, GetScenes };\r\n//# sourceMappingURL=Scenes.js.map","let _width = 800;\r\nlet _height = 600;\r\nlet _resolution = 1;\r\nfunction Size(width = 800, height = 600, resolution = 1) {\r\n    if (resolution === 0) {\r\n        resolution = window.devicePixelRatio;\r\n    }\r\n    return () => {\r\n        _width = width;\r\n        _height = height;\r\n        _resolution = resolution;\r\n    };\r\n}\r\nfunction GetWidth() {\r\n    return _width;\r\n}\r\nfunction GetHeight() {\r\n    return _height;\r\n}\r\nfunction GetResolution() {\r\n    return _resolution;\r\n}\r\nexport { Size, GetWidth, GetHeight, GetResolution };\r\n//# sourceMappingURL=Size.js.map","let _contextAttributes = {\r\n    alpha: false,\r\n    antialias: false,\r\n    depth: false,\r\n    premultipliedAlpha: false\r\n};\r\nfunction WebGLContext(contextAttributes) {\r\n    return () => {\r\n        _contextAttributes = contextAttributes;\r\n    };\r\n}\r\nfunction GetWebGLContext() {\r\n    return _contextAttributes;\r\n}\r\nexport { WebGLContext, GetWebGLContext };\r\n//# sourceMappingURL=WebGLContext.js.map","import CheckShaderMaxIfStatements from './shaders/CheckShaderMaxIfStatements';\r\nimport MultiTextureQuadShader from './shaders/MultiTextureQuadShader';\r\nimport Matrix2dEqual from '../../math/matrix2d-funcs/ExactEquals';\r\nimport Ortho from './Ortho';\r\nimport GL from './GL';\r\nimport SpriteRenderWebGL from '../../gameobjects/sprite/RenderWebGL';\r\nimport { GetWidth, GetHeight, GetResolution, GetBackgroundColor, GetWebGLContext } from '../../config';\r\nexport default class WebGLRenderer {\r\n    constructor() {\r\n        this.clearColor = [0, 0, 0, 1];\r\n        this.flushTotal = 0;\r\n        this.maxTextures = 0;\r\n        this.currentActiveTexture = 0;\r\n        this.startActiveTexture = 0;\r\n        this.tempTextures = [];\r\n        this.clearBeforeRender = true;\r\n        this.optimizeRedraw = true;\r\n        this.autoResize = true;\r\n        this.contextLost = false;\r\n        this.width = GetWidth();\r\n        this.height = GetHeight();\r\n        this.resolution = GetResolution();\r\n        this.setBackgroundColor(GetBackgroundColor());\r\n        const canvas = document.createElement('canvas');\r\n        canvas.addEventListener('webglcontextlost', (event) => this.onContextLost(event), false);\r\n        canvas.addEventListener('webglcontextrestored', () => this.onContextRestored(), false);\r\n        this.canvas = canvas;\r\n        this.initContext();\r\n        this.shader = new MultiTextureQuadShader(this);\r\n    }\r\n    initContext() {\r\n        const gl = this.canvas.getContext('webgl', GetWebGLContext());\r\n        GL.set(gl);\r\n        this.gl = gl;\r\n        this.elementIndexExtension = gl.getExtension('OES_element_index_uint');\r\n        this.getMaxTextures();\r\n        if (this.shader) {\r\n            this.shader.gl = gl;\r\n        }\r\n        gl.disable(gl.DEPTH_TEST);\r\n        gl.disable(gl.CULL_FACE);\r\n        this.resize(this.width, this.height, this.resolution);\r\n    }\r\n    resize(width, height, resolution = 1) {\r\n        this.width = width * resolution;\r\n        this.height = height * resolution;\r\n        this.resolution = resolution;\r\n        const canvas = this.canvas;\r\n        canvas.width = this.width;\r\n        canvas.height = this.height;\r\n        if (this.autoResize) {\r\n            canvas.style.width = this.width / resolution + 'px';\r\n            canvas.style.height = this.height / resolution + 'px';\r\n        }\r\n        this.gl.viewport(0, 0, this.width, this.height);\r\n        this.projectionMatrix = Ortho(width, height);\r\n    }\r\n    onContextLost(event) {\r\n        event.preventDefault();\r\n        this.contextLost = true;\r\n    }\r\n    onContextRestored() {\r\n        this.contextLost = false;\r\n        this.initContext();\r\n    }\r\n    setBackgroundColor(color) {\r\n        const clearColor = this.clearColor;\r\n        const r = color >> 16 & 0xFF;\r\n        const g = color >> 8 & 0xFF;\r\n        const b = color & 0xFF;\r\n        const a = (color > 16777215) ? color >>> 24 : 255;\r\n        clearColor[0] = r / 255;\r\n        clearColor[1] = g / 255;\r\n        clearColor[2] = b / 255;\r\n        clearColor[3] = a / 255;\r\n        return this;\r\n    }\r\n    getMaxTextures() {\r\n        const gl = this.gl;\r\n        let maxTextures = CheckShaderMaxIfStatements(gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS), gl);\r\n        const tempTextures = this.tempTextures;\r\n        if (tempTextures.length) {\r\n            tempTextures.forEach(texture => {\r\n                gl.deleteTexture(texture);\r\n            });\r\n        }\r\n        //  Create temp textures to stop WebGL errors on mac os\r\n        for (let i = 0; i < maxTextures; i++) {\r\n            let tempTexture = gl.createTexture();\r\n            gl.activeTexture(gl.TEXTURE0 + i);\r\n            gl.bindTexture(gl.TEXTURE_2D, tempTexture);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));\r\n            tempTextures[i] = tempTexture;\r\n        }\r\n        this.maxTextures = maxTextures;\r\n        this.textureIndex = Array.from(Array(maxTextures).keys());\r\n        this.activeTextures = Array(maxTextures);\r\n        this.currentActiveTexture = 0;\r\n    }\r\n    reset(framebuffer = null, width = this.width, height = this.height) {\r\n        const gl = this.gl;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n        gl.viewport(0, 0, width, height);\r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n        this.currentActiveTexture = 0;\r\n        this.startActiveTexture++;\r\n        this.flushTotal = 0;\r\n    }\r\n    render(sceneList, dirtyFrame, dirtyCameras) {\r\n        if (this.contextLost) {\r\n            return;\r\n        }\r\n        const gl = this.gl;\r\n        const flushTotal = this.flushTotal;\r\n        //  This is only here because if we don't do _something_ with the context, GL Spector can't see it.\r\n        //  Technically, we could move it below the dirty bail-out below.\r\n        this.reset();\r\n        //  Cache 1 - Nothing dirty? Display the previous frame\r\n        if (this.optimizeRedraw && dirtyFrame === 0 && dirtyCameras === 0) {\r\n            return;\r\n        }\r\n        const shader = this.shader;\r\n        const cls = this.clearColor;\r\n        if (this.clearBeforeRender) {\r\n            gl.clearColor(cls[0], cls[1], cls[2], cls[3]);\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n        }\r\n        const projectionMatrix = this.projectionMatrix;\r\n        //  Cache 2 - Only one dirty camera and one flush? We can re-use the buffers\r\n        /*\r\n        if (dirtyCameras === 1 && dirtyFrame === 0 && flushTotal === 1)\r\n        {\r\n            //  Total items rendered in the previous frame\r\n            const count = shader.prevCount;\r\n\r\n            shader.bind(projectionMatrix, sceneList[0].matrix);\r\n\r\n            shader.draw(count);\r\n\r\n            shader.prevCount = count;\r\n\r\n            this.flushTotal = 1;\r\n\r\n            return;\r\n        }\r\n        */\r\n        let prevCamera;\r\n        for (let c = 0; c < sceneList.length; c += 2) {\r\n            let camera = sceneList[c];\r\n            let list = sceneList[c + 1];\r\n            //  This only needs rebinding if the camera matrix is different to before\r\n            if (!prevCamera || !Matrix2dEqual(camera.worldTransform, prevCamera.worldTransform)) {\r\n                shader.flush();\r\n                shader.bind(projectionMatrix, camera.matrix);\r\n                prevCamera = camera;\r\n            }\r\n            //  Process the render list\r\n            for (let i = 0; i < list.length; i++) {\r\n                SpriteRenderWebGL(list[i], this, shader, this.startActiveTexture);\r\n            }\r\n        }\r\n        //  One final sweep\r\n        shader.flush();\r\n    }\r\n    resetTextures(texture) {\r\n        const gl = this.gl;\r\n        const active = this.activeTextures;\r\n        active.fill(null);\r\n        this.currentActiveTexture = 0;\r\n        this.startActiveTexture++;\r\n        if (texture) {\r\n            //  Set this texture as texture0\r\n            active[0] = texture;\r\n            gl.activeTexture(gl.TEXTURE0);\r\n            gl.bindTexture(gl.TEXTURE_2D, texture.glTexture);\r\n            this.currentActiveTexture = 1;\r\n        }\r\n    }\r\n    requestTexture(texture) {\r\n        const gl = this.gl;\r\n        texture.glIndexCounter = this.startActiveTexture;\r\n        if (this.currentActiveTexture < this.maxTextures) {\r\n            //  Make this texture active\r\n            this.activeTextures[this.currentActiveTexture] = texture;\r\n            texture.glIndex = this.currentActiveTexture;\r\n            gl.activeTexture(gl.TEXTURE0 + this.currentActiveTexture);\r\n            gl.bindTexture(gl.TEXTURE_2D, texture.glTexture);\r\n            this.currentActiveTexture++;\r\n        }\r\n        else {\r\n            //  We're out of textures, so flush the batch and reset them all\r\n            this.shader.flush();\r\n            this.resetTextures(texture);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=WebGLRenderer.js.map","let _bgColor = 0;\r\nfunction BackgroundColor(color = 0) {\r\n    return () => {\r\n        _bgColor = color;\r\n    };\r\n}\r\nfunction GetBackgroundColor() {\r\n    return _bgColor;\r\n}\r\nexport { BackgroundColor, GetBackgroundColor };\r\n//# sourceMappingURL=BackgroundColor.js.map","export default function Ortho(width, height, near = -1, far = 1) {\r\n    const m00 = -2 * (1 / -width);\r\n    const m11 = -2 * (1 / height);\r\n    const m22 = 2 * (1 / (near - far));\r\n    return new Float32Array([m00, 0, 0, 0, 0, m11, 0, 0, 0, 0, m22, 0, -1, 1, 0, 1]);\r\n}\r\n//# sourceMappingURL=Ortho.js.map","//  Compares the a and b matrix and returns if they are equal.\r\nexport default function ExactEquals(a, b) {\r\n    return (a.a === b.a &&\r\n        a.b === b.b &&\r\n        a.c === b.c &&\r\n        a.d === b.d &&\r\n        a.tx === b.tx &&\r\n        a.ty === b.ty);\r\n}\r\n//# sourceMappingURL=ExactEquals.js.map","export default function GetConfigValue(config, property, defaultValue) {\r\n    if (config.hasOwnProperty(property)) {\r\n        return config[property];\r\n    }\r\n    else {\r\n        return defaultValue;\r\n    }\r\n}\r\n//# sourceMappingURL=GetConfigValue.js.map","import GetConfigValue from './GetConfigValue';\r\nimport { GetScenes } from '../config';\r\nimport GameInstance from '../GameInstance';\r\nexport default class SceneManager {\r\n    constructor() {\r\n        this.sceneIndex = 0;\r\n        //  Flush the cache\r\n        this.flush = false;\r\n        //  How many Cameras were made dirty this frame across all Scenes?\r\n        this.dirtyCameras = 0;\r\n        //  How many Game Objects were made dirty this frame across all Scenes?\r\n        this.dirtyFrame = 0;\r\n        //  How many Game Objects were processed this frame across all Scenes?\r\n        this.totalFrame = 0;\r\n        this.game = GameInstance.get();\r\n        this.scenes = new Map();\r\n        this.renderList = [];\r\n        this.game.once('boot', () => this.boot());\r\n    }\r\n    boot() {\r\n        const scenes = GetScenes();\r\n        scenes.forEach(scene => {\r\n            this.add(scene);\r\n        });\r\n    }\r\n    add(scene) {\r\n        const instance = new scene();\r\n        //  At this point the act of creating a new instance of the Scene\r\n        //  will have invoked the init method below, so we can now safely\r\n        //  add the Scene into our Map\r\n        if (instance.willUpdate) {\r\n            instance.boot.call(instance);\r\n        }\r\n    }\r\n    init(scene, config = {}) {\r\n        const size = this.scenes.size;\r\n        const sceneIndex = this.sceneIndex;\r\n        const firstScene = (size === 0);\r\n        if (typeof config === 'string') {\r\n            scene.key = config;\r\n        }\r\n        else if (config || (!config && firstScene)) {\r\n            scene.key = GetConfigValue(config, 'key', 'scene' + sceneIndex);\r\n            scene.willUpdate = GetConfigValue(config, 'willUpdate', firstScene);\r\n            scene.willRender = GetConfigValue(config, 'willRender', firstScene);\r\n        }\r\n        if (this.scenes.has(scene.key)) {\r\n            console.warn('Scene key already in use: ' + scene.key);\r\n        }\r\n        else {\r\n            this.scenes.set(scene.key, scene);\r\n            this.flush = true;\r\n            this.sceneIndex++;\r\n        }\r\n    }\r\n    update(delta, now) {\r\n        for (const scene of this.scenes.values()) {\r\n            if (scene.willUpdate) {\r\n                scene.update.call(scene, delta, now);\r\n                scene.world.update(delta, now);\r\n            }\r\n        }\r\n    }\r\n    render(gameFrame) {\r\n        const renderList = this.renderList;\r\n        renderList.length = 0;\r\n        this.dirtyCameras = 0;\r\n        this.dirtyFrame = 0;\r\n        this.totalFrame = 0;\r\n        for (let scene of this.scenes.values()) {\r\n            if (scene.willRender) {\r\n                let world = scene.world;\r\n                this.dirtyFrame += world.render(gameFrame);\r\n                this.totalFrame += world.totalFrame;\r\n                if (world.renderList.length === 0) {\r\n                    continue;\r\n                }\r\n                if (world.camera.dirtyRender) {\r\n                    this.dirtyCameras++;\r\n                    world.camera.dirtyRender = false;\r\n                }\r\n                renderList.push(world.camera);\r\n                renderList.push(world.renderList);\r\n            }\r\n        }\r\n        if (this.flush) {\r\n            //  Invalidate the renderer cache\r\n            this.dirtyFrame++;\r\n            //  And reset\r\n            this.flush = false;\r\n        }\r\n        return [renderList, this.dirtyFrame, this.dirtyCameras];\r\n    }\r\n}\r\n//# sourceMappingURL=SceneManager.js.map","import { AddToDOM, DOMContentLoaded } from './dom';\r\nimport WebGLRenderer from './renderer/webgl1/WebGLRenderer';\r\nimport SceneManager from './scenes/SceneManager';\r\nimport TextureManager from './textures/TextureManager';\r\nimport EventEmitter from './events/EventEmitter';\r\nimport GameInstance from './GameInstance';\r\nimport { GetParent } from './config';\r\nexport default class Game extends EventEmitter {\r\n    constructor(...settings) {\r\n        super();\r\n        this.VERSION = '4.0.0-beta1';\r\n        this.isPaused = false;\r\n        this.isBooted = false;\r\n        this.lifetime = 0;\r\n        this.elapsed = 0;\r\n        //  The current game frame\r\n        this.frame = 0;\r\n        settings.forEach(setting => {\r\n            setting();\r\n        });\r\n        this.cache = {\r\n            json: new Map(),\r\n            csv: new Map(),\r\n            xml: new Map()\r\n        };\r\n        GameInstance.set(this);\r\n        DOMContentLoaded(() => this.boot());\r\n    }\r\n    boot() {\r\n        this.isBooted = true;\r\n        this.lastTick = Date.now();\r\n        const renderer = new WebGLRenderer();\r\n        //  Only add to the DOM if they either didn't set a Parent, or expressly set it to be non-null\r\n        //  Otherwise we'll let them add the canvas to the DOM themselves\r\n        if (GetParent()) {\r\n            AddToDOM(renderer.canvas, GetParent());\r\n        }\r\n        this.renderer = renderer;\r\n        this.textures = new TextureManager();\r\n        this.scenes = new SceneManager();\r\n        this.banner(this.VERSION);\r\n        //  Visibility API\r\n        document.addEventListener('visibilitychange', () => {\r\n            this.emit('visibilitychange', document.hidden);\r\n            if (document.hidden) {\r\n                this.pause();\r\n            }\r\n            else {\r\n                this.resume();\r\n            }\r\n        });\r\n        // window.addEventListener('blur', () => this.pause());\r\n        // window.addEventListener('focus', () => this.resume());\r\n        this.emit('boot');\r\n        requestAnimationFrame(() => this.step());\r\n    }\r\n    pause() {\r\n        this.isPaused = true;\r\n        this.emit('pause');\r\n    }\r\n    resume() {\r\n        this.isPaused = false;\r\n        this.lastTick = Date.now();\r\n        this.emit('resume');\r\n    }\r\n    banner(version) {\r\n        console.log('%cPhaser v' + version + '%c https://phaser4.io', 'padding: 4px 16px; color: #fff; background: linear-gradient(#3e0081 40%, #00bcc3)', '');\r\n    }\r\n    step() {\r\n        const now = Date.now();\r\n        const delta = now - this.lastTick;\r\n        const dt = delta / 1000;\r\n        this.lifetime += dt;\r\n        this.elapsed = dt;\r\n        this.lastTick = now;\r\n        this.emit('step', dt, now);\r\n        const sceneManager = this.scenes;\r\n        if (!this.isPaused) {\r\n            sceneManager.update(dt, now);\r\n        }\r\n        this.emit('update', dt, now);\r\n        //  TODO: Optimize to remove const and array creation here:\r\n        const [renderList, dirtyFrame, dirtyCameras] = sceneManager.render(this.frame);\r\n        this.renderer.render(renderList, dirtyFrame, dirtyCameras);\r\n        this.emit('render', dt, now);\r\n        //  The frame always advances by 1 each step (even when paused)\r\n        this.frame++;\r\n        requestAnimationFrame(() => this.step());\r\n    }\r\n    destroy() {\r\n        //  TODO\r\n    }\r\n}\r\n//# sourceMappingURL=Game.js.map","export default function DOMContentLoaded(callback) {\r\n    const readyState = document.readyState;\r\n    if (readyState === 'complete' || readyState === 'interactive') {\r\n        callback();\r\n        return;\r\n    }\r\n    const check = () => {\r\n        document.removeEventListener('deviceready', check, true);\r\n        document.removeEventListener('DOMContentLoaded', check, true);\r\n        window.removeEventListener('load', check, true);\r\n        callback();\r\n    };\r\n    if (!document.body) {\r\n        window.setTimeout(check, 20);\r\n    }\r\n    else if (window.hasOwnProperty('cordova')) {\r\n        document.addEventListener('deviceready', check, true);\r\n    }\r\n    else {\r\n        document.addEventListener('DOMContentLoaded', check, true);\r\n        window.addEventListener('load', check, true);\r\n    }\r\n}\r\n//# sourceMappingURL=DOMContentLoaded.js.map","import GetElement from './GetElement';\r\nexport default function AddToDOM(element, parent) {\r\n    const target = GetElement(parent);\r\n    target.appendChild(element);\r\n    return element;\r\n}\r\n//# sourceMappingURL=AddToDOM.js.map","import Rectangle from '../geom/rectangle/Rectangle';\r\nexport default class StaticCamera {\r\n    constructor(scene) {\r\n        this.scene = scene;\r\n        this.renderer = scene.game.renderer;\r\n        this.matrix = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\r\n        this.bounds = new Rectangle();\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        const width = this.renderer.width;\r\n        const height = this.renderer.height;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.bounds.set(0, 0, width, height);\r\n    }\r\n    destroy() {\r\n        this.scene = null;\r\n        this.renderer = null;\r\n        this.matrix = null;\r\n        this.bounds = null;\r\n    }\r\n}\r\n//# sourceMappingURL=StaticCamera.js.map","import StaticCamera from '../camera/StaticCamera';\r\nimport Matrix2D from '../math/matrix2d/Matrix2D';\r\n//  A Static World is designed specifically to have a bounds of a fixed size\r\n//  and a camera that doesn't move at all (no scrolling, rotation, etc)\r\n//  Because it has a fixed size, there is no camera culling enabled.\r\n//  Games that use this kind of world include Pacman, Bejeweled and 2048.\r\nexport default class StaticWorld {\r\n    constructor(scene) {\r\n        //  How many Game Objects were made dirty this frame?\r\n        this.dirtyFrame = 0;\r\n        //  How many Game Objects will be rendered this frame? (are in-bounds)\r\n        this.totalFrame = 0;\r\n        //  How many Game Objects passed `willRender` this frame? (but may not have been in bounds)\r\n        this.visibleFrame = 0;\r\n        this.forceRefresh = false;\r\n        this.scene = scene;\r\n        this.children = [];\r\n        this.renderList = [];\r\n        this.worldTransform = new Matrix2D();\r\n        this.camera = new StaticCamera(scene);\r\n    }\r\n    scanChildren(root, gameFrame) {\r\n        const children = root.children;\r\n        for (let i = 0; i < children.length; i++) {\r\n            this.buildRenderList(children[i], gameFrame);\r\n        }\r\n    }\r\n    buildRenderList(root, gameFrame) {\r\n        if (root.isRenderable()) {\r\n            this.renderList.push(root);\r\n            if (root.dirtyFrame >= gameFrame) {\r\n                this.dirtyFrame++;\r\n            }\r\n            this.visibleFrame++;\r\n        }\r\n        if (root.isParent && root.visible) {\r\n            this.scanChildren(root, gameFrame);\r\n        }\r\n    }\r\n    update(delta, time) {\r\n        const children = this.children;\r\n        for (let i = 0; i < children.length; i++) {\r\n            let child = children[i];\r\n            if (child && child.willUpdate) {\r\n                child.update(delta, time);\r\n            }\r\n        }\r\n    }\r\n    render(gameFrame) {\r\n        this.dirtyFrame = 0;\r\n        this.visibleFrame = 0;\r\n        this.renderList.length = 0;\r\n        this.scanChildren(this, gameFrame);\r\n        this.totalFrame = this.renderList.length;\r\n        if (this.forceRefresh) {\r\n            this.dirtyFrame++;\r\n            this.forceRefresh = false;\r\n        }\r\n        return this.dirtyFrame;\r\n    }\r\n    shutdown() {\r\n        //  Clear the display list and reset the camera, but leave\r\n        //  everything in place so we can return to this World again\r\n        //  at a later stage\r\n        // this.removeChildren();\r\n        this.renderList = [];\r\n        this.camera.reset();\r\n    }\r\n    destroy() {\r\n        this.camera.destroy();\r\n        this.camera = null;\r\n        this.renderList = null;\r\n    }\r\n    get numChildren() {\r\n        return this.children.length;\r\n    }\r\n}\r\n//# sourceMappingURL=StaticWorld.js.map","import { SolidColorTexture } from '@phaserjs/phaser/textures/types';\nimport { Container, AddChild } from '@phaserjs/phaser/gameobjects/container';\nimport { Sprite } from '@phaserjs/phaser/gameobjects/sprite';\nimport { Game, StaticScene } from '@phaserjs/phaser';\nimport { Size, Parent, Scenes } from '@phaserjs/phaser/config';\n\nclass Demo extends StaticScene\n{\n    constructor ()\n    {\n        super();\n\n        const redBlock = SolidColorTexture('#f00', 64, 64);\n\n        const block1 = new Sprite(200, 100, redBlock);\n        const block2 = new Sprite(400, 300, redBlock);\n        const block3 = new Sprite(600, 500, redBlock);\n\n        const parent = new Container();\n\n        AddChild(this.world, block1, block2, block3);\n\n    }\n\n}\n\nexport default () => {\n\n    new Game(\n        Size(800, 600),\n        Parent('example'),\n        Scenes(Demo)\n    );\n\n}","import GameInstance from '../GameInstance';\r\nimport StaticWorld from '../world/StaticWorld';\r\nexport default class StaticScene {\r\n    constructor(config) {\r\n        this.willUpdate = false;\r\n        this.willRender = false;\r\n        this.game = GameInstance.get();\r\n        this.world = new StaticWorld(this);\r\n        this.game.scenes.init(this, config);\r\n    }\r\n    boot() {\r\n    }\r\n    update() {\r\n    }\r\n    render() {\r\n    }\r\n    shutdown() {\r\n    }\r\n    destroy() {\r\n        this.world.destroy();\r\n        this.world = null;\r\n        this.game = null;\r\n    }\r\n}\r\n//# sourceMappingURL=StaticScene.js.map","import CreateCanvas from '../CreateCanvas';\r\nimport Texture from '../Texture';\r\nexport default function SolidColorTexture(color = 'rgba(0,0,0,0)', width = 32, height = 32) {\r\n    const ctx = CreateCanvas(width, height);\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(0, 0, width, height);\r\n    return new Texture(ctx.canvas);\r\n}\r\n//# sourceMappingURL=SolidColorTexture.js.map","import SetParent from './SetParent';\r\nexport default function AddChild(parent, ...child) {\r\n    child.forEach(entity => {\r\n        SetParent(parent, entity);\r\n        parent.children.push(entity);\r\n        entity.updateTransform();\r\n    });\r\n}\r\n//# sourceMappingURL=AddChild.js.map","import RemoveChild from './RemoveChild';\r\nexport default function SetParent(parent, ...child) {\r\n    child.forEach(entity => {\r\n        if (entity.parent) {\r\n            RemoveChild(entity.parent, entity);\r\n        }\r\n        entity.scene = parent.scene;\r\n        entity.parent = parent;\r\n    });\r\n}\r\n//# sourceMappingURL=SetParent.js.map","export default function RemoveChild(parent, ...child) {\r\n    const children = parent.children;\r\n    child.forEach(entity => {\r\n        let index = children.indexOf(entity);\r\n        if (index > -1) {\r\n            children.splice(index, 1);\r\n            entity.parent = null;\r\n        }\r\n    });\r\n}\r\n//# sourceMappingURL=RemoveChild.js.map","import game from \"./graveyard\";\n\nconsole.log(\"main\");\n\ngame();"],"names":["CreateCanvas","width","height","canvas","document","createElement","getContext","Frame","[object Object]","texture","key","x","y","this","trimmed","sourceSizeWidth","sourceSizeHeight","updateUVs","pivot","w","h","spriteSourceSizeX","spriteSourceSizeY","spriteSourceSizeWidth","spriteSourceSizeHeight","baseTextureWidth","baseTextureHeight","u0","v0","u1","v1","gl","get","set","context","DeleteGLTexture","GL","isTexture","deleteTexture","CreateGLTexture","source","potClamp","linear","glTexture","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","texImage2D","RGBA","UNSIGNED_BYTE","mode","LINEAR","NEAREST","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","pot","IsSizePowerOfTwo","wrap","REPEAT","CLAMP_TO_EDGE","TEXTURE_WRAP_S","TEXTURE_WRAP_T","generateMipmap","Texture","image","glIndex","glIndexCounter","frames","Map","data","add","has","frame","firstFrame","console","warn","output","forEach","push","prefix","start","end","zeroPad","suffix","frameKeys","diff","i","toString","padStart","getFrames","setSize","SetGLTextureFilterMode","dstTexture","flipY","UNPACK_FLIP_Y_WEBGL","UpdateGLTexture","clear","framebuffer","isFramebuffer","deleteFramebuffer","DeleteFramebuffer","glFramebuffer","RenderWebGL","sprite","renderer","shader","startActiveTexture","requestTexture","count","batchSize","flush","uploadBuffers","vertexViewF32","vertexViewU32","quadElementSize","Rectangle","rect","Contains","right","value","bottom","Matrix2D","a","b","c","d","tx","ty","src","Symbol","iterator","toArray","Container","name","type","willRender","willUpdate","dirtyRender","dirtyUpdate","dirtyFrame","isParent","visible","inputEnabled","inputEnabledChildren","fixBounds","bounds","setFrame","scene","game","includeChildren","reparentChildren","super","byte","Float32Array","BYTES_PER_ELEMENT","buffer","ArrayBuffer","transformBuffer","transformData","localTransform","worldTransform","updateCache","transform","rotation","skewX","skewY","scaleX","scaleY","Math","cos","sin","updateTransform","setDirtyRender","parent","lt","wt","pa","pb","pc","pd","ptx","pty","originX","originY","CONST","destroy","_alpha","children","delta","time","length","child","update","numChildren","alpha","SetFrame","entity","setBounds","setOrigin","vertexData","hasTexture","gameInstance","Sprite","_tint","_prevTextureID","fill","vertexColor","Uint32Array","vertexAlpha","vertexTint","setTexture","updateVertices","getBounds","GameInstance","textures","createGL","SetTexture","w0","w1","h0","h1","x0","y0","x1","y1","x2","y2","x3","y3","min","max","F32","U32","offset","textureIndex","color","tint","GetElement","target","element","getElementById","nodeType","body","EE","callback","once","TextureManager","createDefaultTextures","missing","strokeStyle","moveTo","lineTo","stroke","strokeRect","fragTemplate","join","generateSrc","maxIfs","shaderSource","fragmentShader","vertexShader","MultiTextureQuadShader","config","attribs","aVertexPosition","aTextureCoord","aTextureId","aTintColor","uniforms","uProjectionMatrix","uCameraMatrix","uTexture","dataSize","indexSize","vertexElementSize","vertexByteSize","quadByteSize","quadIndexSize","bufferByteSize","createBuffers","createShaders","ibo","index","Uint16Array","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","indexBuffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","fragmentShaderSource","vertexShaderSource","maxTextures","replace","createShader","FRAGMENT_SHADER","compileShader","VERTEX_SHADER","program","createProgram","attachShader","linkProgram","useProgram","Object","keys","location","getAttribLocation","enableVertexAttribArray","getUniformLocation","projectionMatrix","cameraMatrix","uniformMatrix4fv","uniform1iv","bindBuffers","stride","vertexAttribPointer","FLOAT","view","subarray","bufferSubData","drawElements","TRIANGLES","UNSIGNED_SHORT","draw","prevCount","flushTotal","_parent","GetParent","_scenes","_width","_height","_resolution","_contextAttributes","antialias","depth","premultipliedAlpha","WebGLRenderer","clearColor","currentActiveTexture","tempTextures","clearBeforeRender","optimizeRedraw","autoResize","contextLost","resolution","setBackgroundColor","addEventListener","event","onContextLost","onContextRestored","initContext","elementIndexExtension","getExtension","getMaxTextures","disable","DEPTH_TEST","CULL_FACE","resize","style","viewport","near","far","Ortho","preventDefault","r","g","fragmentSrc","getShaderParameter","COMPILE_STATUS","CheckShaderMaxIfStatements","getParameter","MAX_TEXTURE_IMAGE_UNITS","tempTexture","Uint8Array","Array","from","activeTextures","bindFramebuffer","FRAMEBUFFER","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","sceneList","dirtyCameras","reset","cls","COLOR_BUFFER_BIT","prevCamera","camera","list","bind","matrix","SpriteRenderWebGL","active","resetTextures","GetConfigValue","property","defaultValue","hasOwnProperty","SceneManager","sceneIndex","totalFrame","scenes","renderList","boot","instance","call","size","firstScene","now","values","world","gameFrame","render","Game","_events","TypeError","listener","listeners","Set","on","delete","out","ee","args","apply","hasContext","hasOnce","undefined","settings","VERSION","isPaused","isBooted","lifetime","elapsed","setting","cache","json","csv","xml","readyState","check","removeEventListener","window","setTimeout","DOMContentLoaded","lastTick","Date","appendChild","banner","emit","hidden","pause","resume","requestAnimationFrame","step","version","log","dt","sceneManager","StaticCamera","StaticWorld","visibleFrame","forceRefresh","root","buildRenderList","isRenderable","scanChildren","Demo","init","redBlock","ctx","fillStyle","fillRect","SolidColorTexture","block1","block2","block3","indexOf","splice","RemoveChild","SetParent","AddChild","devicePixelRatio","Size","concat"],"mappings":"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"}